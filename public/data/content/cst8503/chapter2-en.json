{
  "courseId": "cst8503",
  "chapterId": 2,
  "title": "Chapter 2: Introduction to Prolog",
  "description": "Introduction to Prolog programming language, including basic syntax, facts, rules, queries, and the fundamental concepts of logical programming",
  "duration": "3 hours",
  "difficulty": "Beginner",
  "lastUpdated": "2025-01-16",
  "learningObjectives": [
    "Understand the basic syntax and structure of Prolog",
    "Master the concepts of facts, rules, and queries",
    "Learn how to write simple Prolog programs",
    "Understand the execution model of Prolog",
    "Practice basic Prolog programming skills"
  ],
  "lessons": [
    {
      "id": 1,
      "title": "2.1 Prolog Syntax and Basic Concepts",
      "type": "theory",
      "duration": "40 minutes",
      "order": 1,
      "content": {
        "overview": "Introduction to Prolog syntax, including atoms, variables, predicates, and basic program structure",
        "sections": [
          {
            "title": "Prolog Program Structure",
            "content": "A Prolog program consists of facts and rules. Facts describe relationships or properties, while rules define logical relationships between facts.",
            "keyPoints": [
              "Prolog programs consist of facts and rules",
              "Facts describe relationships or properties",
              "Rules define logical relationships",
              "Programs are executed through queries"
            ]
          },
          {
            "title": "Atoms and Variables",
            "content": "Atoms are constants that start with lowercase letters, while variables start with uppercase letters or underscores.",
            "keyPoints": [
              "Atoms: constants starting with lowercase letters",
              "Variables: start with uppercase letters or underscores",
              "Atoms represent specific objects",
              "Variables can be bound to values"
            ]
          },
          {
            "title": "Predicates and Arity",
            "content": "Predicates are relationships or properties, and arity refers to the number of arguments a predicate takes.",
            "keyPoints": [
              "Predicates represent relationships or properties",
              "Arity is the number of arguments",
              "Same predicate name with different arity are different",
              "Examples: parent/2, likes/2, student/1"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Prolog Syntax Reference",
          "type": "reference",
          "url": "#",
          "description": "Complete Prolog syntax reference guide"
        },
        {
          "name": "Basic Prolog Examples",
          "type": "interactive",
          "url": "#",
          "description": "Interactive examples of basic Prolog syntax"
        }
      ],
      "exercises": [
        {
          "type": "multiple_choice",
          "question": "Which of the following is a valid Prolog atom?",
          "options": ["Parent", "parent", "123", "_variable"],
          "correct": 1,
          "explanation": "Atoms in Prolog start with lowercase letters. 'Parent' is a variable, '123' is a number, and '_variable' is a variable."
        }
      ]
    },
    {
      "id": 2,
      "title": "2.2 Facts in Prolog",
      "type": "practice",
      "duration": "35 minutes",
      "order": 2,
      "content": {
        "overview": "Learning how to write and use facts in Prolog programs",
        "sections": [
          {
            "title": "Writing Facts",
            "content": "Facts are statements that are always true. They end with a period and describe relationships or properties.",
            "keyPoints": [
              "Facts are always true statements",
              "End with a period",
              "Describe relationships or properties",
              "Examples: parent(john, mary). likes(john, pizza)."
            ]
          },
          {
            "title": "Family Relationship Example",
            "content": "Using family relationships to demonstrate how to write facts in Prolog.",
            "codeExample": {
              "language": "prolog",
              "code": "% Family facts\nparent(john, mary).\nparent(john, tom).\nparent(susan, mary).\nparent(susan, tom).\n\n% Gender facts\nmale(john).\nmale(tom).\nfemale(mary).\nfemale(susan).",
              "explanation": "These facts define family relationships and gender information. John and Susan are parents of Mary and Tom."
            }
          }
        ]
      },
      "resources": [
        {
          "name": "Family Tree Exercise",
          "type": "exercise",
          "url": "#",
          "description": "Practice writing family relationship facts"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "Write Prolog facts to represent: John likes pizza, Mary likes ice cream, Tom likes pizza, and Susan likes coffee.",
          "hint": "Use the predicate likes/2 with names and food items",
          "solution": "likes(john, pizza).\nlikes(mary, ice_cream).\nlikes(tom, pizza).\nlikes(susan, coffee).",
          "explanation": "Each fact uses the likes/2 predicate with a person and their favorite food item."
        }
      ]
    },
    {
      "id": 3,
      "title": "2.3 Rules in Prolog",
      "type": "practice",
      "duration": "45 minutes",
      "order": 3,
      "content": {
        "overview": "Learning how to write rules that define logical relationships between facts",
        "sections": [
          {
            "title": "Rule Structure",
            "content": "Rules have the form 'Head :- Body.' where Head is true if Body is true. The body can contain multiple conditions connected by commas.",
            "keyPoints": [
              "Rules: Head :- Body.",
              "Head is true if Body is true",
              "Body can have multiple conditions",
              "Comma represents logical AND"
            ]
          },
          {
            "title": "Ancestor Rule Example",
            "content": "Demonstrating how to write rules for ancestor relationships.",
            "codeExample": {
              "language": "prolog",
              "code": "% Ancestor rules\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).",
              "explanation": "First rule: X is ancestor of Y if X is parent of Y. Second rule: X is ancestor of Y if X is parent of Z and Z is ancestor of Y."
            }
          },
          {
            "title": "Sibling Rule Example",
            "content": "Writing rules to define sibling relationships.",
            "codeExample": {
              "language": "prolog",
              "code": "% Sibling rule\nsibling(X, Y) :- parent(Z, X), parent(Z, Y), X \\= Y.",
              "explanation": "X and Y are siblings if they have the same parent Z and X is not equal to Y."
            }
          }
        ]
      },
      "resources": [
        {
          "name": "Rule Writing Practice",
          "type": "exercise",
          "url": "#",
          "description": "Practice writing various types of rules"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "Write a Prolog rule to define 'grandparent': X is grandparent of Y if X is parent of Z and Z is parent of Y.",
          "hint": "Use parent/2 predicate twice in the rule body",
          "solution": "grandparent(X, Y) :- parent(X, Z), parent(Z, Y).",
          "explanation": "The rule states that X is grandparent of Y if there exists a Z such that X is parent of Z and Z is parent of Y."
        }
      ]
    },
    {
      "id": 4,
      "title": "2.4 Queries and Execution",
      "type": "practice",
      "duration": "40 minutes",
      "order": 4,
      "content": {
        "overview": "Learning how to query Prolog programs and understand the execution model",
        "sections": [
          {
            "title": "Simple Queries",
            "content": "Queries ask questions about the knowledge base. Simple queries check if a fact is true.",
            "keyPoints": [
              "Queries ask questions about the knowledge base",
              "Simple queries check if facts are true",
              "Use ?- prompt for queries",
              "Examples: ?- parent(john, mary). ?- likes(john, pizza)."
            ]
          },
          {
            "title": "Queries with Variables",
            "content": "Variables in queries can be bound to values that make the query true.",
            "keyPoints": [
              "Variables can be bound to values",
              "Prolog finds all possible bindings",
              "Use semicolon to get next solution",
              "Examples: ?- parent(X, mary). ?- likes(john, X)."
            ]
          },
          {
            "title": "Execution Model",
            "content": "Prolog uses backtracking to find all possible solutions to queries.",
            "keyPoints": [
              "Prolog uses backtracking",
              "Finds all possible solutions",
              "Backtracks when goals fail",
              "Continues until all solutions found"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Query Practice Environment",
          "type": "tool",
          "url": "#",
          "description": "Interactive environment for practicing Prolog queries"
        }
      ],
      "exercises": [
        {
          "type": "multiple_choice",
          "question": "What does the query ?- parent(X, mary). do?",
          "options": [
            "Checks if parent(mary, X) is true",
            "Finds all X such that X is parent of mary",
            "Checks if parent(X, mary) is always true",
            "Creates a new fact parent(X, mary)"
          ],
          "correct": 1,
          "explanation": "The query ?- parent(X, mary). finds all possible values of X that make X a parent of mary."
        }
      ]
    },
    {
      "id": 5,
      "title": "2.5 Practical Examples",
      "type": "practice",
      "duration": "40 minutes",
      "order": 5,
      "content": {
        "overview": "Working through practical examples to solidify understanding of Prolog basics",
        "sections": [
          {
            "title": "Complete Family Tree Program",
            "content": "Building a complete family tree program with facts and rules.",
            "codeExample": {
              "language": "prolog",
              "code": "% Family facts\nparent(john, mary).\nparent(john, tom).\nparent(susan, mary).\nparent(susan, tom).\nparent(mary, alice).\nparent(tom, bob).\n\n% Rules\nsibling(X, Y) :- parent(Z, X), parent(Z, Y), X \\= Y.\ngrandparent(X, Y) :- parent(X, Z), parent(Z, Y).\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).",
              "explanation": "Complete family tree with facts and rules for various relationships."
            }
          },
          {
            "title": "Query Examples",
            "content": "Examples of different types of queries on the family tree.",
            "keyPoints": [
              "?- parent(john, mary). (checks if john is parent of mary)",
              "?- parent(X, mary). (finds all parents of mary)",
              "?- sibling(mary, tom). (checks if mary and tom are siblings)",
              "?- ancestor(john, alice). (checks if john is ancestor of alice)"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Family Tree Project",
          "type": "project",
          "url": "#",
          "description": "Complete family tree project with exercises"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "Add facts for a new family member 'david' who is the child of 'alice', and write a query to find all of david's ancestors.",
          "hint": "Add parent(alice, david). and use ancestor/2 rule",
          "solution": "% Add fact\nparent(alice, david).\n\n% Query\n?- ancestor(X, david).",
          "explanation": "First add the fact that alice is parent of david, then query for all ancestors of david using the ancestor/2 rule."
        }
      ]
    }
  ],
  "assessment": {
    "quiz": {
      "questions": [
        {
          "id": 1,
          "type": "multiple_choice",
          "question": "What is the correct syntax for a Prolog fact?",
          "options": [
            "parent(john, mary)",
            "parent(john, mary).",
            "parent(john, mary);",
            "parent(john, mary),"
          ],
          "correct": 1,
          "points": 2
        },
        {
          "id": 2,
          "type": "multiple_choice",
          "question": "In Prolog, what does the comma (,) represent in a rule body?",
          "options": [
            "Logical OR",
            "Logical AND",
            "Logical NOT",
            "Logical XOR"
          ],
          "correct": 1,
          "points": 2
        },
        {
          "id": 3,
          "type": "true_false",
          "question": "Variables in Prolog must start with an uppercase letter.",
          "correct": true,
          "points": 1
        },
        {
          "id": 4,
          "type": "multiple_choice",
          "question": "What does the query ?- parent(X, mary). accomplish?",
          "options": [
            "Checks if mary is a parent",
            "Finds all X such that X is parent of mary",
            "Creates a new parent relationship",
            "Deletes the parent relationship"
          ],
          "correct": 1,
          "points": 2
        }
      ],
      "totalPoints": 7,
      "passingScore": 4
    }
  },
  "resources": {
    "readings": [
      {
        "title": "Prolog Programming Basics",
        "author": "Todd Kelley",
        "type": "course_notes",
        "url": "#",
        "description": "Fundamental concepts of Prolog programming"
      }
    ],
    "videos": [
      {
        "title": "Prolog Syntax and Execution",
        "duration": "20 minutes",
        "url": "#",
        "description": "Understanding Prolog syntax and execution model"
      }
    ],
    "tools": [
      {
        "name": "SWI-Prolog Online",
        "type": "programming",
        "url": "#",
        "description": "Online SWI-Prolog environment for practice"
      }
    ]
  },
  "prerequisites": [1],
  "nextChapter": 3
}
