{
  "courseId": "cst8503",
  "chapterId": 1,
  "title": "Chapter 1: Introduction to Knowledge Representation",
  "description": "Introduction to basic concepts of knowledge representation, including the differences between AI, machine learning, and knowledge representation, and the importance of declarative knowledge",
  "duration": "2 hours",
  "difficulty": "Beginner",
  "lastUpdated": "2025-01-16",
  "learningObjectives": [
    "Understand the role of knowledge representation in artificial intelligence",
    "Distinguish between machine learning and knowledge representation approaches",
    "Master the basic concepts of declarative knowledge",
    "Understand the advantages of declarative programming",
    "Understand facts and rules programming paradigm"
  ],
  "lessons": [
    {
      "id": 1,
      "title": "1.1 Knowledge Representation vs Machine Learning vs Artificial Intelligence",
      "type": "theory",
      "duration": "30 minutes",
      "order": 1,
      "content": {
        "overview": "Introduction to the differences and connections between AI, machine learning, and knowledge representation",
        "sections": [
          {
            "title": "Overview of Artificial Intelligence",
            "content": "AI software is a category of software solutions that solve problems typically considered to require or benefit from intelligence. The Turing Test is an important standard for evaluating AI.",
            "keyPoints": [
              "AI software solves problems requiring intelligence",
              "Turing Test is the standard for evaluating intelligence",
              "Successfully faking intelligence requires real intelligence"
            ]
          },
          {
            "title": "Machine Learning Approaches",
            "content": "Machine learning focuses on finding patterns in data, including three main approaches: supervised learning, unsupervised learning, and reinforcement learning.",
            "keyPoints": [
              "Supervised learning: training with labeled datasets",
              "Unsupervised learning: algorithms autonomously find patterns",
              "Reinforcement learning: policy learning based on rewards"
            ]
          },
          {
            "title": "Knowledge Representation Approaches",
            "content": "Knowledge representation focuses on declarative knowledge forms suitable for processing by specialized reasoning engines, providing patterns directly in the form of facts and rules.",
            "keyPoints": [
              "Declarative knowledge: facts and rules written in language",
              "Patterns provided directly in the form of facts and rules",
              "System knows how to utilize patterns without learning"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Basic Concepts of AI",
          "type": "reading",
          "url": "#",
          "description": "Basic differences between AI, ML, and KR"
        },
        {
          "name": "Turing Test Explained",
          "type": "video",
          "url": "#",
          "description": "Understanding the significance and application of the Turing Test"
        }
      ],
      "exercises": [
        {
          "type": "multiple_choice",
          "question": "Which of the following most accurately describes the difference between knowledge representation and machine learning?",
          "options": [
            "Knowledge representation requires large amounts of data, machine learning does not",
            "Knowledge representation provides patterns directly, machine learning learns patterns from data",
            "Knowledge representation is only for text processing, machine learning is for image processing",
            "Knowledge representation is simpler than machine learning"
          ],
          "correct": 1,
          "explanation": "Knowledge representation provides patterns directly to the system in the form of facts and rules, while machine learning needs to learn these patterns from data."
        }
      ]
    },
    {
      "id": 2,
      "title": "1.2 Declarative Knowledge",
      "type": "theory",
      "duration": "25 minutes",
      "order": 2,
      "content": {
        "overview": "Deep understanding of declarative knowledge concepts, characteristics, and design considerations",
        "sections": [
          {
            "title": "Design Considerations for Knowledge Representation Languages",
            "content": "Knowledge representation languages need to be able to represent world states, possible actions, and the results of actions in changing world states.",
            "keyPoints": [
              "Represent world states",
              "Represent possible actions",
              "Represent results of actions"
            ]
          },
          {
            "title": "Declarative vs Procedural",
            "content": "Declarative approaches describe 'what is', while procedural approaches describe 'how to do'. Declarative knowledge is easier to understand and maintain.",
            "keyPoints": [
              "Declarative: describes what is",
              "Procedural: describes how to do",
              "Declarative knowledge is easier to understand"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Declarative Knowledge Examples",
          "type": "interactive",
          "url": "#",
          "description": "Understanding declarative knowledge through examples"
        }
      ],
      "exercises": [
        {
          "type": "true_false",
          "question": "Declarative knowledge describes 'how to do' rather than 'what is'.",
          "correct": false,
          "explanation": "Declarative knowledge describes 'what is', i.e., facts and rules, rather than 'how to do' steps."
        }
      ]
    },
    {
      "id": 3,
      "title": "1.3 Declarative Programming",
      "type": "theory",
      "duration": "20 minutes",
      "order": 3,
      "content": {
        "overview": "Understanding how declarative knowledge becomes executable programs through reasoning engines",
        "sections": [
          {
            "title": "Procedural Interpretation of Declarative Knowledge",
            "content": "Declarative knowledge has a procedural interpretation. When combined with the correct reasoning engine, declarative knowledge can be viewed as a program.",
            "keyPoints": [
              "Declarative knowledge has procedural interpretation",
              "Requires correct reasoning engine",
              "Program runs through queries"
            ]
          },
          {
            "title": "Prolog as a Theorem Prover",
            "content": "Prolog uses declarative knowledge to derive conditions under which queries are true through reasoning, achieving variable binding.",
            "keyPoints": [
              "Prolog is a theorem prover",
              "Derives results through reasoning",
              "Achieves variable binding"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Prolog Reasoning Process",
          "type": "animation",
          "url": "#",
          "description": "Visualizing Prolog's reasoning process"
        }
      ],
      "exercises": [
        {
          "type": "multiple_choice",
          "question": "How does Prolog execute declarative programs?",
          "options": [
            "By compiling into machine code",
            "By interpreting line by line",
            "By reasoning to derive conditions under which queries are true",
            "By neural network learning"
          ],
          "correct": 2,
          "explanation": "Prolog derives conditions under which queries are true through reasoning engines, achieving variable binding, which is the core mechanism of declarative programming."
        }
      ]
    },
    {
      "id": 4,
      "title": "1.4 Facts and Rules Programming",
      "type": "practice",
      "duration": "45 minutes",
      "order": 4,
      "content": {
        "overview": "Learning how to program with facts and rules through practical examples",
        "sections": [
          {
            "title": "Ancestor Relationship Example",
            "content": "Using ancestor relationships as an example to demonstrate how to represent knowledge with facts and rules.",
            "codeExample": {
              "language": "prolog",
              "code": "% Ancestor relationship rules\nforall X, Y Parent(X,Y) -> Ancestor(X,Y).\nforall X,Y Parent(X,Y) and Ancestor(Y,Z) -> Ancestor(X,Z).",
              "explanation": "These rules define ancestor relationships: if X is Y's parent, then X is Y's ancestor; if X is Y's parent and Y is Z's ancestor, then X is Z's ancestor."
            }
          },
          {
            "title": "Advantages of Knowledge Representation",
            "content": "Declarative knowledge representation has advantages such as strong readability, easy maintenance, and support for reasoning.",
            "keyPoints": [
              "Strong readability",
              "Easy maintenance",
              "Supports automatic reasoning",
              "Modular design"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Prolog Online Environment",
          "type": "tool",
          "url": "#",
          "description": "Online Prolog programming environment"
        },
        {
          "name": "Ancestor Relationship Exercise",
          "type": "exercise",
          "url": "#",
          "description": "Practice writing ancestor relationship rules"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "Write Prolog rules to represent 'If A is B's brother and B is C's parent, then A is C's uncle'",
          "hint": "Need to define brother relationship and uncle relationship",
          "solution": "brother(X,Y) :- parent(Z,X), parent(Z,Y), X \\= Y.\nuncle(X,Y) :- brother(X,Z), parent(Z,Y).",
          "explanation": "First define brother relationship: if X and Y have the same parent Z and X is not equal to Y, then X is Y's brother. Then define uncle relationship: if X is Z's brother and Z is Y's parent, then X is Y's uncle."
        }
      ]
    }
  ],
  "assessment": {
    "quiz": {
      "questions": [
        {
          "id": 1,
          "type": "multiple_choice",
          "question": "What is the main characteristic of knowledge representation?",
          "options": [
            "Requires large amounts of training data",
            "Provides patterns directly in the form of facts and rules",
            "Can only handle numerical data",
            "Requires GPU acceleration"
          ],
          "correct": 1,
          "points": 2
        },
        {
          "id": 2,
          "type": "true_false",
          "question": "Declarative knowledge describes 'how to do' rather than 'what is'.",
          "correct": false,
          "points": 1
        },
        {
          "id": 3,
          "type": "multiple_choice",
          "question": "What is the main function of Prolog as a theorem prover?",
          "options": [
            "Compile programs",
            "Execute reasoning to derive conditions under which queries are true",
            "Optimize code performance",
            "Generate random data"
          ],
          "correct": 1,
          "points": 2
        }
      ],
      "totalPoints": 5,
      "passingScore": 3
    }
  },
  "resources": {
    "readings": [
      {
        "title": "Fundamentals of Knowledge Representation",
        "author": "Todd Kelley",
        "type": "course_notes",
        "url": "#",
        "description": "Core course reading materials"
      }
    ],
    "videos": [
      {
        "title": "Differences between AI, ML, and KR",
        "duration": "15 minutes",
        "url": "#",
        "description": "Deep understanding of the differences between the three concepts"
      }
    ],
    "tools": [
      {
        "name": "Prolog Online Environment",
        "type": "programming",
        "url": "#",
        "description": "Online Prolog programming and testing environment"
      }
    ]
  },
  "prerequisites": [],
  "nextChapter": 2
}
