{
  "courseId": "cst8503",
  "chapterId": "chapter6-prolog-negation",
  "title": "Prolog否定",
  "description": "Prolog否定相关题目",
  "totalQuestions": 5,
  "lastUpdated": "2025-10-16",
  "language": "zh",
  "questions": [
    {
      "id": 27,
      "type": "multiple-choice",
      "question": "Prolog中的截断操作符是什么？",
      "options": ["&", "!", "#", "$"],
      "correctAnswer": 1,
      "explanation": "Prolog中的截断操作符是感叹号'!'，它总是成功并丢弃选择点。",
      "difficulty": "easy",
      "tags": ["chapter6-prolog-negation"],
      "points": 1
    },
    {
      "id": 28,
      "type": "multiple-choice",
      "question": "为什么截断被认为是非逻辑的？",
      "options": [
        "它改变了程序的含义",
        "它破坏了逻辑一致性",
        "它依赖于执行顺序",
        "以上都是"
      ],
      "correctAnswer": 3,
      "explanation": "截断是非逻辑的，因为它改变程序含义、破坏逻辑一致性，并依赖于执行顺序。",
      "difficulty": "easy",
      "tags": ["chapter6-prolog-negation"],
      "points": 1
    },
    {
      "id": 29,
      "type": "multiple-choice",
      "question": "Prolog中失败否定的定义是什么？",
      "options": [
        "not(P) :- P, !, fail ; true.",
        "not(P) :- P, fail.",
        "not(P) :- \\+ P.",
        "not(P) :- P = false."
      ],
      "correctAnswer": 0,
      "explanation": "失败否定定义为not(P) :- P, !, fail ; true.，也可以写成前缀操作符\\+ P。",
      "difficulty": "medium",
      "tags": ["chapter6-prolog-negation"],
      "points": 1
    },
    {
      "id": 53,
      "type": "coding",
      "question": "编写一个Prolog程序来演示截断操作符(!)和失败否定的使用。包括：1）使用截断防止回溯的谓词，2）使用\\+操作符实现失败否定的谓词，3）显示截断和否定之间差异的示例。包含演示行为的测试用例。",
      "correctAnswer": "% 事实\nstudent(john).\nstudent(mary).\nstudent(tom).\n\n% 截断示例 - 仅第一个学生\nfirst_student(X) :- student(X), !.\n\n% 失败否定示例\nnot_student(X) :- \\+ student(X).\n\n% 替代否定定义\nnot_student_alt(X) :- student(X), !, fail ; true.\n\n% 条件中的截断\npass_grade(Score) :- Score >= 60, !, write('Passed').\npass_grade(Score) :- write('Failed').\n\n% 测试用例：\n% ?- first_student(X).  % 仅返回john，无回溯\n% ?- not_student(alice).  % true (alice不是学生)\n% ?- not_student(john).   % false (john是学生)\n% ?- pass_grade(75).     % Passed\n% ?- pass_grade(45).     % Failed\n\n% 演示截断vs否定：\n% ?- student(X), write(X), nl, fail.  % 列出所有学生\n% ?- first_student(X), write(X), nl, fail.  % 仅john（截断防止回溯）",
      "explanation": "这演示了用于防止回溯的截断操作符(!)和使用\\+操作符的失败否定。显示了何时使用每个以及它们的不同行为的实际示例。",
      "difficulty": "medium",
      "tags": ["chapter6-prolog-negation"],
      "points": 2
    },
    {
      "id": 54,
      "type": "coding",
      "question": "编写一个Prolog程序来实现使用否定和截断的简单专家系统。创建规则用于：1）使用截断防止多重分类的动物分类，2）使用否定的基于规则的决策制定，3）使用截断的异常处理。包含关于动物的事实并演示专家系统的运行。",
      "correctAnswer": "% 动物事实\nhas_feathers(penguin).\nhas_feathers(eagle).\ncan_fly(eagle).\ncan_fly(sparrow).\ncan_swim(penguin).\ncan_swim(duck).\nhas_fur(cat).\nhas_fur(dog).\nhas_scales(fish).\nhas_scales(snake).\n\n% 使用截断的动物分类\nbird(X) :- has_feathers(X), !.\nmammal(X) :- has_fur(X), !.\nfish_animal(X) :- has_scales(X), !.\nfish_animal(X) :- can_swim(X), \\+ has_feathers(X), \\+ has_fur(X), !.\n\n% 使用否定的决策制定\ncan_pet(X) :- mammal(X), \\+ dangerous(X).\ncan_pet(X) :- bird(X), \\+ dangerous(X).\n\n% 异常处理\ndangerous(snake).\ndangerous(eagle).\n\n% 安全动物（否定）\nsafe_animal(X) :- \\+ dangerous(X).\n\n% 测试用例：\n% ?- bird(penguin).  % true\n% ?- mammal(cat).    % true\n% ?- fish_animal(fish).  % true\n% ?- can_pet(cat).   % true\n% ?- can_pet(snake). % false (危险)\n% ?- safe_animal(cat).  % true\n% ?- safe_animal(snake). % false\n\n% 专家系统查询：\n% ?- bird(X), can_pet(X).  % 找到可以抚摸的鸟类",
      "explanation": "这演示了一个使用截断进行分类、否定进行决策制定和异常处理的实用专家系统。显示了截断如何防止多重分类以及否定如何处理异常。",
      "difficulty": "hard",
      "tags": ["chapter6-prolog-negation"],
      "points": 3
    }
  ]
}
