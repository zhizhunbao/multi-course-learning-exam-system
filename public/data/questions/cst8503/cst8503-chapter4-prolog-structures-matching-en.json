{
  "courseId": "cst8503",
  "chapterId": "chapter4-prolog-structures-matching",
  "title": "Prolog结构与匹配",
  "description": "Prolog结构与匹配相关题目",
  "totalQuestions": 8,
  "lastUpdated": "2025-10-16",
  "language": "en",
  "questions": [
    {
      "id": 38,
      "type": "multiple-choice",
      "question": "How many syntactic forms do atoms have in Prolog?",
      "options": ["1 form", "2 forms", "3 forms", "4 forms"],
      "correctAnswer": 2,
      "explanation": "Atoms in Prolog have 3 syntactic forms: strings starting with lowercase letters, special character strings, and strings in single quotes.",
      "difficulty": "easy",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 39,
      "type": "multiple-choice",
      "question": "What is the scope of variable names in Prolog?",
      "options": [
        "Global scope",
        "Single clause",
        "Entire program",
        "Single predicate"
      ],
      "correctAnswer": 1,
      "explanation": "The scope of variable names in Prolog is a single clause.",
      "difficulty": "easy",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 40,
      "type": "multiple-choice",
      "question": "What is a structure in Prolog?",
      "options": [
        "Single value",
        "Object with multiple components",
        "Function call",
        "Variable"
      ],
      "correctAnswer": 1,
      "explanation": "A structure is an object with multiple components, such as date(17, june, 2006).",
      "difficulty": "easy",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 41,
      "type": "multiple-choice",
      "question": "What is the difference between matching and unification in Prolog?",
      "options": [
        "No difference",
        "Unification includes occurs check",
        "Matching is stricter",
        "Unification is looser"
      ],
      "correctAnswer": 1,
      "explanation": "Unification = matching + occurs check. The occurs check ensures one side doesn't occur within the other.",
      "difficulty": "medium",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 42,
      "type": "multiple-choice",
      "question": "What is the better way to represent that two things are different in Prolog?",
      "options": [
        "Use \\+ operator",
        "Use dif/2 predicate",
        "Use = operator",
        "Use != operator"
      ],
      "correctAnswer": 1,
      "explanation": "The dif/2 built-in predicate is better because it delays comparison until both variables are instantiated.",
      "difficulty": "medium",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 43,
      "type": "coding",
      "question": "Write a Prolog program that demonstrates the four steps of the matching algorithm. Create predicates that demonstrate: 1) Constant matching, 2) Variable instantiation, 3) Structure matching with same functor, and 4) Structure matching with different functors.",
      "correctAnswer": "% Constant matching\nequal_constants(X, X).\n\n% Variable instantiation\ninstantiate_var(X, Y) :- var(X), nonvar(Y), X = Y.\n\n% Structure matching with same functor\nmatch_structure(f(X), f(Y)) :- X = Y.\nmatch_structure(g(X,Y), g(A,B)) :- X = A, Y = B.\n\n% Structure matching with different functors (should fail)\nmatch_different(f(X), g(Y)) :- fail.\n\n% Example facts\nperson(john).\nperson(mary).\n\n% Example queries:\n% ?- equal_constants(5, 5).\n% ?- instantiate_var(X, john).\n% ?- match_structure(f(john), f(X)).",
      "explanation": "This demonstrates the four steps of Prolog's matching algorithm: constant matching, variable instantiation, structure matching with same functor, and handling different functors.",
      "difficulty": "hard",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 3
    },
    {
      "id": 44,
      "type": "coding",
      "question": "Write a Prolog program that represents geometric objects using structures. Include: 1) Point structures point(X,Y), 2) Line segment structures seg(P1,P2), 3) Triangle structures triangle(P1,P2,P3), 4) Predicates to check if segments are vertical or horizontal, 5) Predicates to calculate distances between points.",
      "correctAnswer": "% Geometric object structures\n% Points: point(X, Y)\n% Segments: seg(point(X1,Y1), point(X2,Y2))\n% Triangles: triangle(point(X1,Y1), point(X2,Y2), point(X3,Y3))\n\n% Check if segment is vertical (same X coordinates)\nvertical(seg(point(X1,Y1), point(X1, Y2))).\n\n% Check if segment is horizontal (same Y coordinates)\nhorizontal(seg(point(X1,Y1), point(X2, Y1))).\n\n% Calculate distance between two points\ndistance(point(X1,Y1), point(X2,Y2), Distance) :-\n    DX is X2 - X1,\n    DY is Y2 - Y1,\n    Distance is sqrt(DX*DX + DY*DY).\n\n% Check if three points form a right triangle\nright_triangle(triangle(P1, P2, P3)) :-\n    distance(P1, P2, D1),\n    distance(P2, P3, D2),\n    distance(P1, P3, D3),\n    (D1*D1 + D2*D2 =:= D3*D3 ;\n     D1*D1 + D3*D3 =:= D2*D2 ;\n     D2*D2 + D3*D3 =:= D1*D1).\n\n% Example geometric objects\npoint1(point(0, 0)).\npoint2(point(3, 0)).\npoint3(point(0, 4)).\nsegment1(seg(point(0,0), point(3,0))).\ntriangle1(triangle(point(0,0), point(3,0), point(0,4))).\n\n% Test queries:\n% ?- vertical(seg(point(1,1), point(1,3))).\n% ?- horizontal(seg(point(1,1), point(3,1))).\n% ?- distance(point(0,0), point(3,4), D).\n% ?- right_triangle(triangle(point(0,0), point(3,0), point(0,4))).",
      "explanation": "This demonstrates Prolog structures for geometric objects, showing how to represent complex data using structures and how to write predicates that work with structured data.",
      "difficulty": "medium",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 2
    },
    {
      "id": 45,
      "type": "coding",
      "question": "Write a Prolog program that demonstrates arithmetic expressions as structures. Include: 1) Structures representing arithmetic expressions like +(X,Y), *(A,B), -(P,Q), 2) Predicates to evaluate arithmetic expressions, 3) Predicates to simplify expressions (e.g., X+0 = X), 4) Predicates to check if expressions are equivalent.",
      "correctAnswer": "% Arithmetic expressions as structures\n% Examples: +(X,Y), *(A,B), -(P,Q), /(X,Y)\n\n% Evaluate arithmetic expressions\neval(+(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal + YVal.\neval(*(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal * YVal.\neval(-(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal - YVal.\neval(/(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal / YVal.\neval(X, X) :- number(X).\n\n% Simplify arithmetic expressions\nsimplify(+(X,0), X).\nsimplify(+(0,X), X).\nsimplify(*(X,1), X).\nsimplify(*(1,X), X).\nsimplify(*(X,0), 0).\nsimplify(*(0,X), 0).\nsimplify(-(X,0), X).\nsimplify(/(X,1), X).\nsimplify(X, X) :- number(X).\n\n% Check if two expressions are equivalent\nequivalent(Expr1, Expr2) :-\n    eval(Expr1, Val1),\n    eval(Expr2, Val2),\n    Val1 =:= Val2.\n\n% Convert infix to prefix notation\ninfix_to_prefix(X+Y, +(X,Y)).\ninfix_to_prefix(X*Y, *(X,Y)).\ninfix_to_prefix(X-Y, -(X,Y)).\ninfix_to_prefix(X/Y, /(X,Y)).\ninfix_to_prefix(X, X) :- number(X).\n\n% Example expressions\n% ?- eval(+(2,3), Result).\n% ?- eval(*(+(2,3), 4), Result).\n% ?- simplify(+(5,0), Simplified).\n% ?- equivalent(+(2,3), *(1,5)).\n% ?- infix_to_prefix(2+3*4, Prefix).",
      "explanation": "This demonstrates how arithmetic expressions can be represented as Prolog structures and how to manipulate them programmatically, including evaluation, simplification, and equivalence checking.",
      "difficulty": "hard",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 3
    }
  ]
}
