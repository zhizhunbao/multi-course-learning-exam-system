{
  "courseId": "cst8503",
  "chapterId": "chapter4-prolog-structures-matching",
  "title": "Prolog结构与匹配",
  "description": "Prolog结构与匹配相关题目",
  "totalQuestions": 8,
  "lastUpdated": "2025-10-16",
  "language": "zh",
  "questions": [
    {
      "id": 38,
      "type": "multiple-choice",
      "question": "Prolog中原子有多少种语法形式？",
      "options": ["1种形式", "2种形式", "3种形式", "4种形式"],
      "correctAnswer": 2,
      "explanation": "Prolog中的原子有3种语法形式：以小写字母开头的字符串、特殊字符字符串和单引号中的字符串。",
      "difficulty": "easy",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 39,
      "type": "multiple-choice",
      "question": "Prolog中变量名的作用域是什么？",
      "options": ["全局作用域", "单个子句", "整个程序", "单个谓词"],
      "correctAnswer": 1,
      "explanation": "Prolog中变量名的词法作用域是一个子句。",
      "difficulty": "easy",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 40,
      "type": "multiple-choice",
      "question": "Prolog中的结构是什么？",
      "options": ["单个值", "具有多个组件的对象", "函数调用", "变量"],
      "correctAnswer": 1,
      "explanation": "结构是具有多个组件的对象，例如date(17, june, 2006)。",
      "difficulty": "easy",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 41,
      "type": "multiple-choice",
      "question": "Prolog中匹配和统一的区别是什么？",
      "options": ["没有区别", "统一包含出现检查", "匹配更严格", "统一更宽松"],
      "correctAnswer": 1,
      "explanation": "统一 = 匹配 + 出现检查。出现检查确保一侧不会出现在另一侧内部。",
      "difficulty": "medium",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 42,
      "type": "multiple-choice",
      "question": "在Prolog中表示两个事物不同的更好方法是什么？",
      "options": [
        "使用\\+操作符",
        "使用dif/2谓词",
        "使用=操作符",
        "使用!=操作符"
      ],
      "correctAnswer": 1,
      "explanation": "dif/2内置谓词更好，因为它会延迟比较直到两个变量都被实例化。",
      "difficulty": "medium",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 1
    },
    {
      "id": 43,
      "type": "coding",
      "question": "编写一个Prolog程序，演示匹配算法的四个步骤。创建谓词来演示：1）常量匹配，2）变量实例化，3）相同函子的结构匹配，4）不同函子的结构匹配。",
      "correctAnswer": "% 常量匹配\nequal_constants(X, X).\n\n% 变量实例化\ninstantiate_var(X, Y) :- var(X), nonvar(Y), X = Y.\n\n% 相同函子的结构匹配\nmatch_structure(f(X), f(Y)) :- X = Y.\nmatch_structure(g(X,Y), g(A,B)) :- X = A, Y = B.\n\n% 不同函子的结构匹配（应该失败）\nmatch_different(f(X), g(Y)) :- fail.\n\n% 示例事实\nperson(john).\nperson(mary).\n\n% 示例查询：\n% ?- equal_constants(5, 5).\n% ?- instantiate_var(X, john).\n% ?- match_structure(f(john), f(X)).",
      "explanation": "这演示了Prolog匹配算法的四个步骤：常量匹配、变量实例化、相同函子的结构匹配和处理不同函子。",
      "difficulty": "hard",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 3
    },
    {
      "id": 44,
      "type": "coding",
      "question": "编写一个Prolog程序，使用结构表示几何对象。包括：1）点结构point(X,Y)，2）线段结构seg(P1,P2)，3）三角形结构triangle(P1,P2,P3)，4）检查线段是否垂直或水平的谓词，5）计算点之间距离的谓词。",
      "correctAnswer": "% 几何对象结构\n% 点：point(X, Y)\n% 线段：seg(point(X1,Y1), point(X2,Y2))\n% 三角形：triangle(point(X1,Y1), point(X2,Y2), point(X3,Y3))\n\n% 检查线段是否垂直（X坐标相同）\nvertical(seg(point(X1,Y1), point(X1, Y2))).\n\n% 检查线段是否水平（Y坐标相同）\nhorizontal(seg(point(X1,Y1), point(X2, Y1))).\n\n% 计算两点之间的距离\ndistance(point(X1,Y1), point(X2,Y2), Distance) :-\n    DX is X2 - X1,\n    DY is Y2 - Y1,\n    Distance is sqrt(DX*DX + DY*DY).\n\n% 检查三个点是否形成直角三角形\nright_triangle(triangle(P1, P2, P3)) :-\n    distance(P1, P2, D1),\n    distance(P2, P3, D2),\n    distance(P1, P3, D3),\n    (D1*D1 + D2*D2 =:= D3*D3 ;\n     D1*D1 + D3*D3 =:= D2*D2 ;\n     D2*D2 + D3*D3 =:= D1*D1).\n\n% 示例几何对象\npoint1(point(0, 0)).\npoint2(point(3, 0)).\npoint3(point(0, 4)).\nsegment1(seg(point(0,0), point(3,0))).\ntriangle1(triangle(point(0,0), point(3,0), point(0,4))).\n\n% 测试查询：\n% ?- vertical(seg(point(1,1), point(1,3))).\n% ?- horizontal(seg(point(1,1), point(3,1))).\n% ?- distance(point(0,0), point(3,4), D).\n% ?- right_triangle(triangle(point(0,0), point(3,0), point(0,4))).",
      "explanation": "这演示了Prolog结构用于几何对象，展示了如何使用结构表示复杂数据以及如何编写与结构化数据一起工作的谓词。",
      "difficulty": "medium",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 2
    },
    {
      "id": 45,
      "type": "coding",
      "question": "编写一个Prolog程序，演示算术表达式作为结构。包括：1）表示算术表达式的结构，如+(X,Y)、*(A,B)、-(P,Q)，2）计算算术表达式的谓词，3）简化表达式的谓词（例如X+0 = X），4）检查表达式是否等价的谓词。",
      "correctAnswer": "% 作为结构的算术表达式\n% 示例：+(X,Y), *(A,B), -(P,Q), /(X,Y)\n\n% 计算算术表达式\neval(+(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal + YVal.\neval(*(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal * YVal.\neval(-(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal - YVal.\neval(/(X,Y), Result) :- eval(X, XVal), eval(Y, YVal), Result is XVal / YVal.\neval(X, X) :- number(X).\n\n% 简化算术表达式\nsimplify(+(X,0), X).\nsimplify(+(0,X), X).\nsimplify(*(X,1), X).\nsimplify(*(1,X), X).\nsimplify(*(X,0), 0).\nsimplify(*(0,X), 0).\nsimplify(-(X,0), X).\nsimplify(/(X,1), X).\nsimplify(X, X) :- number(X).\n\n% 检查两个表达式是否等价\nequivalent(Expr1, Expr2) :-\n    eval(Expr1, Val1),\n    eval(Expr2, Val2),\n    Val1 =:= Val2.\n\n% 将中缀转换为前缀表示法\ninfix_to_prefix(X+Y, +(X,Y)).\ninfix_to_prefix(X*Y, *(X,Y)).\ninfix_to_prefix(X-Y, -(X,Y)).\ninfix_to_prefix(X/Y, /(X,Y)).\ninfix_to_prefix(X, X) :- number(X).\n\n% 示例表达式\n% ?- eval(+(2,3), Result).\n% ?- eval(*(+(2,3), 4), Result).\n% ?- simplify(+(5,0), Simplified).\n% ?- equivalent(+(2,3), *(1,5)).\n% ?- infix_to_prefix(2+3*4, Prefix).",
      "explanation": "这演示了算术表达式如何表示为Prolog结构以及如何以编程方式操作它们，包括计算、简化和等价性检查。",
      "difficulty": "hard",
      "tags": ["chapter4-prolog-structures-matching"],
      "points": 3
    }
  ]
}
