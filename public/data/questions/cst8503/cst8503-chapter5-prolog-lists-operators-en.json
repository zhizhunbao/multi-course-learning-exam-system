{
  "courseId": "cst8503",
  "chapterId": "chapter5-prolog-lists-operators",
  "title": "Prolog列表和操作符",
  "description": "Prolog列表和操作符相关题目",
  "totalQuestions": 6,
  "lastUpdated": "2025-10-16",
  "language": "en",
  "questions": [
    {
      "id": 20,
      "type": "multiple-choice",
      "question": "What are the head and tail of a Prolog list?",
      "options": [
        "First and last elements",
        "First element and remaining list",
        "All elements",
        "Empty list"
      ],
      "correctAnswer": 1,
      "explanation": "The head of a list is the first element, and the tail is the remaining list of elements.",
      "difficulty": "easy",
      "tags": ["chapter5-prolog-lists-operators"],
      "points": 1
    },
    {
      "id": 21,
      "type": "multiple-choice",
      "question": "What is the standard notation for Prolog list [a,b,c]?",
      "options": [
        "'(a,b,c)'",
        "'[|]'(a,'[|]'(b,'[|]'(c,[])))",
        "'list'(a,b,c)",
        "'cons'(a,'cons'(b,c))"
      ],
      "correctAnswer": 1,
      "explanation": "List notation is syntactic sugar, the standard notation for [a,b,c] is '[|]'(a,'[|]'(b,'[|]'(c,[]))).",
      "difficulty": "easy",
      "tags": ["chapter5-prolog-lists-operators"],
      "points": 1
    },
    {
      "id": 25,
      "type": "multiple-choice",
      "question": "What is the correct way to perform arithmetic calculations in Prolog?",
      "options": [
        "Use = operator",
        "Use is operator",
        "Use := operator",
        "Use == operator"
      ],
      "correctAnswer": 1,
      "explanation": "Use the is operator for arithmetic calculations in Prolog, e.g., X is 1 + 2.",
      "difficulty": "easy",
      "tags": ["chapter5-prolog-lists-operators"],
      "points": 1
    },
    {
      "id": 50,
      "type": "multiple-choice",
      "question": "What is the correct definition of the del/3 predicate in Prolog (delete element from list)?",
      "options": [
        "del(X, [X | Tail], Tail). del(X, [Y | Tail], [Y | Tail1]) :- del(X, Tail, Tail1).",
        "del(X, [X | Tail], Tail). del(X, [Y | Tail], [Y | Tail1]) :- del(X, Tail, Tail1).",
        "del(X, [X | Tail], Tail). del(X, [Y | Tail], [Y | Tail1]) :- del(X, Tail, Tail1).",
        "del(X, [X | Tail], Tail). del(X, [Y | Tail], [Y | Tail1]) :- del(X, Tail, Tail1)."
      ],
      "correctAnswer": 0,
      "explanation": "The del/3 predicate deletes the first occurrence of an element from a list: if X is the head then delete it, otherwise recursively delete X from the tail.",
      "difficulty": "medium",
      "tags": ["chapter5-prolog-lists-operators"],
      "points": 1
    },
    {
      "id": 51,
      "type": "coding",
      "question": "Write a complete Prolog program that implements list operations including: 1) append/3 predicate to concatenate two lists, 2) reverse/2 predicate to reverse a list, 3) sum_list/2 predicate to calculate the sum of numbers in a list. Include test cases for each predicate.",
      "correctAnswer": "% Append predicate - concatenate two lists\nappend([], L, L).\nappend([X | L1], L2, [X | L3]) :- append(L1, L2, L3).\n\n% Reverse predicate - reverse a list\nreverse([], []).\nreverse([X | L], R) :- reverse(L, RL), append(RL, [X], R).\n\n% Sum list predicate - sum of numbers in a list\nsum_list([], 0).\nsum_list([X | L], Sum) :- sum_list(L, SumTail), Sum is X + SumTail.\n\n% Test cases:\n% ?- append([1,2], [3,4], Result).\n% ?- reverse([1,2,3,4], Result).\n% ?- sum_list([1,2,3,4], Sum).\n\n% Alternative reverse using accumulator:\nreverse_acc([], Acc, Acc).\nreverse_acc([X | L], Acc, Result) :- reverse_acc(L, [X | Acc], Result).\nreverse_alt(L, R) :- reverse_acc(L, [], R).",
      "explanation": "This demonstrates fundamental list operations in Prolog: concatenation, reversal, and arithmetic operations on lists. Shows both recursive and accumulator-based approaches.",
      "difficulty": "medium",
      "tags": ["chapter5-prolog-lists-operators"],
      "points": 2
    },
    {
      "id": 52,
      "type": "coding",
      "question": "Write a Prolog program that demonstrates custom operator definitions and arithmetic operations. Define operators for: 1) Custom arithmetic operations (add, multiply), 2) List operations (cons, head, tail), 3) Comparison operations. Include examples showing operator precedence and associativity.",
      "correctAnswer": "% Define custom operators\n:- op(500, xfx, add).\n:- op(400, xfx, multiply).\n:- op(300, xfy, cons).\n:- op(200, xfx, equals).\n\n% Custom arithmetic operations\nX add Y is Z :- Z is X + Y.\nX multiply Y is Z :- Z is X * Y.\n\n% List operations\nhead([X | _], X).\ntail([_ | L], L).\ncons(X, L, [X | L]).\n\n% Comparison operations\nX equals Y :- X =:= Y.\n\n% Examples:\n% ?- 5 add 3 is Result.\n% ?- 4 multiply 6 is Result.\n% ?- head([1,2,3], H).\n% ?- tail([1,2,3], T).\n% ?- cons(0, [1,2,3], NewList).\n% ?- 5 equals 5.\n\n% Operator precedence demonstration:\n% ?- 2 add 3 multiply 4 is Result.  % Equivalent to: 2 add (3 multiply 4)\n% ?- (2 add 3) multiply 4 is Result.  % Explicit precedence",
      "explanation": "This demonstrates custom operator definitions in Prolog, showing how to define operators with different precedence levels and associativity, and how to use them in arithmetic and list operations.",
      "difficulty": "hard",
      "tags": ["chapter5-prolog-lists-operators"],
      "points": 3
    }
  ]
}
