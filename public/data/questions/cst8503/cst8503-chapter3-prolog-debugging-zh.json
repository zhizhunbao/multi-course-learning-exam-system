{
  "courseId": "cst8503",
  "chapterId": "chapter3-prolog-debugging",
  "title": "Prolog调试",
  "description": "Prolog调试相关题目",
  "totalQuestions": 6,
  "lastUpdated": "2025-10-16",
  "language": "zh",
  "questions": [
    {
      "id": 14,
      "type": "multiple-choice",
      "question": "Prolog调试中trace/0谓词的用途是什么？",
      "options": ["停止执行", "逐步跟踪", "设置断点", "查看变量"],
      "correctAnswer": 1,
      "explanation": "trace/0谓词逐步执行后续目标，显示执行信息。",
      "difficulty": "medium",
      "tags": ["chapter3-prolog-debugging"],
      "points": 1
    },
    {
      "id": 22,
      "type": "multiple-choice",
      "question": "Prolog中member/2谓词的正确定义是什么？",
      "options": [
        "member(X,[X|_]).",
        "member(X,[_|L]) :- member(X,L).",
        "以上都是",
        "以上都不是"
      ],
      "correctAnswer": 2,
      "explanation": "member/2谓词需要两个子句：一个基本情况（X作为头）和一个递归情况（X在尾中）。",
      "difficulty": "medium",
      "tags": ["chapter3-prolog-debugging"],
      "points": 1
    },
    {
      "id": 23,
      "type": "multiple-choice",
      "question": "Prolog中conc/3谓词的用途是什么？",
      "options": ["删除元素", "连接列表", "查找元素", "排序列表"],
      "correctAnswer": 1,
      "explanation": "conc/3谓词用于连接两个列表，conc(L1,L2,L3)表示L3是L1和L2的连接。",
      "difficulty": "medium",
      "tags": ["chapter3-prolog-debugging"],
      "points": 1
    },
    {
      "id": 42,
      "type": "multiple-choice",
      "question": "Prolog中spy/1谓词的用途是什么？",
      "options": ["停止跟踪", "设置断点", "指定要跟踪的谓词", "查看变量值"],
      "correctAnswer": 2,
      "explanation": "spy/1谓词指定要跟踪的谓词（例如parent），例如spy(parent)。",
      "difficulty": "medium",
      "tags": ["chapter3-prolog-debugging"],
      "points": 1
    },
    {
      "id": 34,
      "type": "coding",
      "question": "编写一个完整的Prolog程序来实现ancestor/2谓词，包含适当的调试功能。包括家谱的事实、祖先规则，并演示如何使用trace/0和spy/1来调试祖先关系。",
      "correctAnswer": "% 家谱事实\nparent(john, mary).\nparent(mary, tom).\nparent(tom, lisa).\nparent(john, sarah).\nparent(sarah, lisa).\n\n% 祖先谓词\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Z) :- parent(X, Y), ancestor(Y, Z).\n\n% 调试示例：\n% ?- trace.\n% ?- ancestor(john, lisa).\n% ?- nospy.\n% ?- spy(ancestor).\n% ?- ancestor(john, tom).\n\n% 使用guitracer的替代调试：\n% ?- guitracer.\n% ?- ancestor(john, lisa).",
      "explanation": "这演示了适当的Prolog调试技术，包括trace/0用于逐步执行、spy/1用于特定谓词跟踪，以及guitracer/0用于图形调试。",
      "difficulty": "medium",
      "tags": ["chapter3-prolog-debugging"],
      "points": 2
    },
    {
      "id": 36,
      "type": "coding",
      "question": "编写一个完整的Prolog程序来实现length/2谓词，包含调试功能。包括测试用例并演示如何使用trace/0调试递归谓词，显示length([1,2,3], N)的逐步执行过程。",
      "correctAnswer": "% 长度谓词\nlength([], 0).\nlength([_ | L], N) :- length(L, N0), N is N0 + 1.\n\n% 测试用例\n% ?- length([], N).\n% ?- length([1], N).\n% ?- length([1,2,3], N).\n\n% 调试示例：\n% ?- trace.\n% ?- length([1,2,3], N).\n% 这将显示：\n% 1. 调用: length([1,2,3], _G123)\n% 2. 调用: length([2,3], _G124)\n% 3. 调用: length([3], _G125)\n% 4. 调用: length([], _G126)\n% 5. 退出: length([], 0)\n% 6. 退出: length([3], 1)\n% 7. 退出: length([2,3], 2)\n% 8. 退出: length([1,2,3], 3)\n\n% 使用spy的替代方法：\n% ?- spy(length).\n% ?- length([1,2,3], N).",
      "explanation": "这演示了调试递归谓词，显示trace/0如何揭示递归调用中的逐步执行和变量绑定。",
      "difficulty": "medium",
      "tags": ["chapter3-prolog-debugging"],
      "points": 2
    }
  ]
}
