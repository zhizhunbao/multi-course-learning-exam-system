{
  "courseId": "cst8503",
  "chapterId": 2,
  "title": "第2章：Prolog介绍",
  "description": "介绍Prolog编程语言，包括基本语法、事实、规则、查询和逻辑编程的基本概念",
  "duration": "3小时",
  "difficulty": "初级",
  "lastUpdated": "2025-01-16",
  "learningObjectives": [
    "理解Prolog的基本语法和结构",
    "掌握事实、规则和查询的概念",
    "学习如何编写简单的Prolog程序",
    "理解Prolog的执行模型",
    "练习基本的Prolog编程技能"
  ],
  "lessons": [
    {
      "id": 1,
      "title": "2.1 Prolog语法和基本概念",
      "type": "theory",
      "duration": "40分钟",
      "order": 1,
      "content": {
        "overview": "介绍Prolog语法，包括原子、变量、谓词和基本程序结构",
        "sections": [
          {
            "title": "Prolog程序结构",
            "content": "Prolog程序由事实和规则组成。事实描述关系或属性，规则定义事实之间的逻辑关系。",
            "keyPoints": [
              "Prolog程序由事实和规则组成",
              "事实描述关系或属性",
              "规则定义逻辑关系",
              "通过查询执行程序"
            ]
          },
          {
            "title": "原子和变量",
            "content": "原子是以小写字母开头的常量，而变量以大写字母或下划线开头。",
            "keyPoints": [
              "原子：以小写字母开头的常量",
              "变量：以大写字母或下划线开头",
              "原子表示特定对象",
              "变量可以绑定到值"
            ]
          },
          {
            "title": "谓词和元数",
            "content": "谓词是关系或属性，元数是指谓词接受的参数数量。",
            "keyPoints": [
              "谓词表示关系或属性",
              "元数是参数的数量",
              "相同谓词名但不同元数是不同的",
              "例子：parent/2, likes/2, student/1"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "Prolog语法参考",
          "type": "reference",
          "url": "#",
          "description": "完整的Prolog语法参考指南"
        },
        {
          "name": "基本Prolog示例",
          "type": "interactive",
          "url": "#",
          "description": "基本Prolog语法的交互式示例"
        }
      ],
      "exercises": [
        {
          "type": "multiple_choice",
          "question": "以下哪个是有效的Prolog原子？",
          "options": ["Parent", "parent", "123", "_variable"],
          "correct": 1,
          "explanation": "Prolog中的原子以小写字母开头。'Parent'是变量，'123'是数字，'_variable'是变量。"
        }
      ]
    },
    {
      "id": 2,
      "title": "2.2 Prolog中的事实",
      "type": "practice",
      "duration": "35分钟",
      "order": 2,
      "content": {
        "overview": "学习如何在Prolog程序中编写和使用事实",
        "sections": [
          {
            "title": "编写事实",
            "content": "事实是始终为真的语句。它们以句号结尾，描述关系或属性。",
            "keyPoints": [
              "事实是始终为真的语句",
              "以句号结尾",
              "描述关系或属性",
              "例子：parent(john, mary). likes(john, pizza)."
            ]
          },
          {
            "title": "家庭关系示例",
            "content": "使用家庭关系来演示如何在Prolog中编写事实。",
            "codeExample": {
              "language": "prolog",
              "code": "% 家庭事实\nparent(john, mary).\nparent(john, tom).\nparent(susan, mary).\nparent(susan, tom).\n\n% 性别事实\nmale(john).\nmale(tom).\nfemale(mary).\nfemale(susan).",
              "explanation": "这些事实定义了家庭关系和性别信息。John和Susan是Mary和Tom的父母。"
            }
          }
        ]
      },
      "resources": [
        {
          "name": "家谱练习",
          "type": "exercise",
          "url": "#",
          "description": "练习编写家庭关系事实"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "编写Prolog事实来表示：John喜欢披萨，Mary喜欢冰淇淋，Tom喜欢披萨，Susan喜欢咖啡。",
          "hint": "使用谓词likes/2，包含姓名和食物",
          "solution": "likes(john, pizza).\nlikes(mary, ice_cream).\nlikes(tom, pizza).\nlikes(susan, coffee).",
          "explanation": "每个事实使用likes/2谓词，包含一个人和他们喜欢的食物。"
        }
      ]
    },
    {
      "id": 3,
      "title": "2.3 Prolog中的规则",
      "type": "practice",
      "duration": "45分钟",
      "order": 3,
      "content": {
        "overview": "学习如何编写定义事实之间逻辑关系的规则",
        "sections": [
          {
            "title": "规则结构",
            "content": "规则的形式为'Head :- Body.'，其中如果Body为真，则Head为真。Body可以包含由逗号连接的多个条件。",
            "keyPoints": [
              "规则：Head :- Body.",
              "如果Body为真，则Head为真",
              "Body可以有多个条件",
              "逗号表示逻辑AND"
            ]
          },
          {
            "title": "祖先规则示例",
            "content": "演示如何为祖先关系编写规则。",
            "codeExample": {
              "language": "prolog",
              "code": "% 祖先规则\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).",
              "explanation": "第一个规则：如果X是Y的父母，则X是Y的祖先。第二个规则：如果X是Z的父母且Z是Y的祖先，则X是Y的祖先。"
            }
          },
          {
            "title": "兄弟姐妹规则示例",
            "content": "编写定义兄弟姐妹关系的规则。",
            "codeExample": {
              "language": "prolog",
              "code": "% 兄弟姐妹规则\nsibling(X, Y) :- parent(Z, X), parent(Z, Y), X \\= Y.",
              "explanation": "如果X和Y有相同的父母Z且X不等于Y，则X和Y是兄弟姐妹。"
            }
          }
        ]
      },
      "resources": [
        {
          "name": "规则编写练习",
          "type": "exercise",
          "url": "#",
          "description": "练习编写各种类型的规则"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "编写Prolog规则来定义'祖父母'：如果X是Z的父母且Z是Y的父母，则X是Y的祖父母。",
          "hint": "在规则体中使用parent/2谓词两次",
          "solution": "grandparent(X, Y) :- parent(X, Z), parent(Z, Y).",
          "explanation": "规则说明如果存在Z使得X是Z的父母且Z是Y的父母，则X是Y的祖父母。"
        }
      ]
    },
    {
      "id": 4,
      "title": "2.4 查询和执行",
      "type": "practice",
      "duration": "40分钟",
      "order": 4,
      "content": {
        "overview": "学习如何查询Prolog程序并理解执行模型",
        "sections": [
          {
            "title": "简单查询",
            "content": "查询对知识库提出问题。简单查询检查事实是否为真。",
            "keyPoints": [
              "查询对知识库提出问题",
              "简单查询检查事实是否为真",
              "使用?-提示符进行查询",
              "例子：?- parent(john, mary). ?- likes(john, pizza)."
            ]
          },
          {
            "title": "带变量的查询",
            "content": "查询中的变量可以绑定到使查询为真的值。",
            "keyPoints": [
              "变量可以绑定到值",
              "Prolog找到所有可能的绑定",
              "使用分号获取下一个解",
              "例子：?- parent(X, mary). ?- likes(john, X)."
            ]
          },
          {
            "title": "执行模型",
            "content": "Prolog使用回溯来找到查询的所有可能解。",
            "keyPoints": [
              "Prolog使用回溯",
              "找到所有可能的解",
              "当目标失败时回溯",
              "继续直到找到所有解"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "查询练习环境",
          "type": "tool",
          "url": "#",
          "description": "练习Prolog查询的交互式环境"
        }
      ],
      "exercises": [
        {
          "type": "multiple_choice",
          "question": "查询?- parent(X, mary).的作用是什么？",
          "options": [
            "检查parent(mary, X)是否为真",
            "找到所有X使得X是mary的父母",
            "检查parent(X, mary)是否始终为真",
            "创建新的事实parent(X, mary)"
          ],
          "correct": 1,
          "explanation": "查询?- parent(X, mary).找到所有使X成为mary父母的X的可能值。"
        }
      ]
    },
    {
      "id": 5,
      "title": "2.5 实际示例",
      "type": "practice",
      "duration": "40分钟",
      "order": 5,
      "content": {
        "overview": "通过实际示例来巩固对Prolog基础的理解",
        "sections": [
          {
            "title": "完整的家谱程序",
            "content": "构建一个包含事实和规则的完整家谱程序。",
            "codeExample": {
              "language": "prolog",
              "code": "% 家庭事实\nparent(john, mary).\nparent(john, tom).\nparent(susan, mary).\nparent(susan, tom).\nparent(mary, alice).\nparent(tom, bob).\n\n% 规则\nsibling(X, Y) :- parent(Z, X), parent(Z, Y), X \\= Y.\ngrandparent(X, Y) :- parent(X, Z), parent(Z, Y).\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).",
              "explanation": "包含事实和各种关系规则的完整家谱。"
            }
          },
          {
            "title": "查询示例",
            "content": "在家谱上进行不同类型查询的示例。",
            "keyPoints": [
              "?- parent(john, mary). (检查john是否是mary的父母)",
              "?- parent(X, mary). (找到mary的所有父母)",
              "?- sibling(mary, tom). (检查mary和tom是否是兄弟姐妹)",
              "?- ancestor(john, alice). (检查john是否是alice的祖先)"
            ]
          }
        ]
      },
      "resources": [
        {
          "name": "家谱项目",
          "type": "project",
          "url": "#",
          "description": "包含练习的完整家谱项目"
        }
      ],
      "exercises": [
        {
          "type": "coding",
          "question": "为新的家庭成员'david'添加事实，他是'alice'的孩子，并编写查询来找到david的所有祖先。",
          "hint": "添加parent(alice, david).并使用ancestor/2规则",
          "solution": "% 添加事实\nparent(alice, david).\n\n% 查询\n?- ancestor(X, david).",
          "explanation": "首先添加alice是david父母的事实，然后使用ancestor/2规则查询david的所有祖先。"
        }
      ]
    }
  ],
  "assessment": {
    "quiz": {
      "questions": [
        {
          "id": 1,
          "type": "multiple_choice",
          "question": "Prolog事实的正确语法是什么？",
          "options": [
            "parent(john, mary)",
            "parent(john, mary).",
            "parent(john, mary);",
            "parent(john, mary),"
          ],
          "correct": 1,
          "points": 2
        },
        {
          "id": 2,
          "type": "multiple_choice",
          "question": "在Prolog中，规则体中的逗号(,)表示什么？",
          "options": ["逻辑OR", "逻辑AND", "逻辑NOT", "逻辑XOR"],
          "correct": 1,
          "points": 2
        },
        {
          "id": 3,
          "type": "true_false",
          "question": "Prolog中的变量必须以大写字母开头。",
          "correct": true,
          "points": 1
        },
        {
          "id": 4,
          "type": "multiple_choice",
          "question": "查询?- parent(X, mary).的作用是什么？",
          "options": [
            "检查mary是否是父母",
            "找到所有X使得X是mary的父母",
            "创建新的父母关系",
            "删除父母关系"
          ],
          "correct": 1,
          "points": 2
        }
      ],
      "totalPoints": 7,
      "passingScore": 4
    }
  },
  "resources": {
    "readings": [
      {
        "title": "Prolog编程基础",
        "author": "Todd Kelley",
        "type": "course_notes",
        "url": "#",
        "description": "Prolog编程的基本概念"
      }
    ],
    "videos": [
      {
        "title": "Prolog语法和执行",
        "duration": "20分钟",
        "url": "#",
        "description": "理解Prolog语法和执行模型"
      }
    ],
    "tools": [
      {
        "name": "SWI-Prolog在线",
        "type": "programming",
        "url": "#",
        "description": "用于练习的在线SWI-Prolog环境"
      }
    ]
  },
  "prerequisites": [1],
  "nextChapter": 3
}
